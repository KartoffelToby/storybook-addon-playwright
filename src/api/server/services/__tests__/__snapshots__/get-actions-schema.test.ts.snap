// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`getActionsSchema should generate schema 1`] = `
Object {
  "check": Object {
    "kind": "function",
    "parameters": Object {
      "options": Object {
        "additionalProperties": false,
        "properties": Object {
          "force": Object {
            "description": "Whether to bypass the actionability checks. Defaults to \`false\`.",
            "type": "boolean",
          },
          "noWaitAfter": Object {
            "description": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to \`false\`.",
            "type": "boolean",
          },
          "timeout": Object {
            "description": "Maximum time in milliseconds, defaults to 30 seconds, pass \`0\` to disable timeout. The default value can be changed by using the browserContext.setDefaultTimeout(timeout) or page.setDefaultTimeout(timeout) methods.",
            "type": "number",
          },
        },
        "type": "object",
      },
      "selector": Object {
        "description": "A selector to search for checkbox or radio button to check. If there are multiple elements satisfying the selector, the first will be checked. See working with selectors for more details.",
        "type": "string",
      },
    },
    "required": Array [
      "selector",
    ],
    "type": "Promise",
  },
  "clearInput": Object {
    "kind": "function",
    "parameters": Object {
      "options": Object {
        "additionalProperties": false,
        "properties": Object {
          "blur": Object {
            "type": "boolean",
          },
          "timeout": Object {
            "type": "number",
          },
        },
        "type": "object",
      },
      "selector": Object {
        "type": "string",
      },
    },
    "required": Array [
      "selector",
    ],
    "type": "Promise",
  },
  "click": Object {
    "kind": "function",
    "parameters": Object {
      "options": Object {
        "additionalProperties": false,
        "properties": Object {
          "button": Object {
            "description": "Defaults to \`left\`.",
            "enum": Array [
              "left",
              "middle",
              "right",
            ],
            "type": "string",
          },
          "clickCount": Object {
            "description": "defaults to 1. See UIEvent.detail.",
            "type": "number",
          },
          "delay": Object {
            "description": "Time to wait between \`mousedown\` and \`mouseup\` in milliseconds. Defaults to 0.",
            "type": "number",
          },
          "force": Object {
            "description": "Whether to bypass the actionability checks. Defaults to \`false\`.",
            "type": "boolean",
          },
          "modifiers": Object {
            "description": "Modifier keys to press. Ensures that only these modifiers are pressed during the click, and then restores current modifiers back. If not specified, currently pressed modifiers are used.",
            "items": Object {
              "enum": Array [
                "Alt",
                "Control",
                "Meta",
                "Shift",
              ],
              "type": "string",
            },
            "type": "array",
          },
          "noWaitAfter": Object {
            "description": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to \`false\`.",
            "type": "boolean",
          },
          "position": Object {
            "additionalProperties": false,
            "description": "A point to click relative to the top-left corner of element padding box. If not specified, clicks to some visible point of the element.",
            "properties": Object {
              "x": Object {
                "type": "number",
              },
              "y": Object {
                "type": "number",
              },
            },
            "required": Array [
              "x",
              "y",
            ],
            "type": "object",
          },
          "timeout": Object {
            "description": "Maximum time in milliseconds, defaults to 30 seconds, pass \`0\` to disable timeout. The default value can be changed by using the browserContext.setDefaultTimeout(timeout) or page.setDefaultTimeout(timeout) methods.",
            "type": "number",
          },
        },
        "type": "object",
      },
      "selector": Object {
        "description": "A selector to search for element to click. If there are multiple elements satisfying the selector, the first will be clicked. See working with selectors for more details.",
        "type": "string",
      },
    },
    "required": Array [
      "selector",
    ],
    "type": "Promise",
  },
  "clickSelector": Object {
    "properties": Object {
      "selector": Object {
        "type": "string",
      },
    },
    "type": "null",
  },
  "dblclick": Object {
    "kind": "function",
    "parameters": Object {
      "options": Object {
        "additionalProperties": false,
        "properties": Object {
          "button": Object {
            "description": "Defaults to \`left\`.",
            "enum": Array [
              "left",
              "middle",
              "right",
            ],
            "type": "string",
          },
          "delay": Object {
            "description": "Time to wait between \`mousedown\` and \`mouseup\` in milliseconds. Defaults to 0.",
            "type": "number",
          },
          "force": Object {
            "description": "Whether to bypass the actionability checks. Defaults to \`false\`.",
            "type": "boolean",
          },
          "modifiers": Object {
            "description": "Modifier keys to press. Ensures that only these modifiers are pressed during the double click, and then restores current modifiers back. If not specified, currently pressed modifiers are used.",
            "items": Object {
              "enum": Array [
                "Alt",
                "Control",
                "Meta",
                "Shift",
              ],
              "type": "string",
            },
            "type": "array",
          },
          "noWaitAfter": Object {
            "description": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to \`false\`.",
            "type": "boolean",
          },
          "position": Object {
            "additionalProperties": false,
            "description": "A point to double click relative to the top-left corner of element padding box. If not specified, double clicks to some visible point of the element.",
            "properties": Object {
              "x": Object {
                "type": "number",
              },
              "y": Object {
                "type": "number",
              },
            },
            "required": Array [
              "x",
              "y",
            ],
            "type": "object",
          },
          "timeout": Object {
            "description": "Maximum time in milliseconds, defaults to 30 seconds, pass \`0\` to disable timeout. The default value can be changed by using the browserContext.setDefaultTimeout(timeout) or page.setDefaultTimeout(timeout) methods.",
            "type": "number",
          },
        },
        "type": "object",
      },
      "selector": Object {
        "description": "A selector to search for element to double click. If there are multiple elements satisfying the selector, the first will be double clicked. See working with selectors for more details.",
        "type": "string",
      },
    },
    "required": Array [
      "selector",
    ],
    "type": "Promise",
  },
  "dragDropSelector": Object {
    "kind": "function",
    "parameters": Object {
      "mouseDownRelativeToSelector": Object {
        "additionalProperties": false,
        "properties": Object {
          "x": Object {
            "type": "number",
          },
          "y": Object {
            "type": "number",
          },
        },
        "type": "object",
      },
      "selector": Object {
        "type": "string",
      },
      "to": Object {
        "additionalProperties": false,
        "properties": Object {
          "x": Object {
            "type": "number",
          },
          "y": Object {
            "type": "number",
          },
        },
        "type": "object",
      },
    },
    "required": Array [
      "selector",
      "to",
    ],
    "type": "Promise",
  },
  "fill": Object {
    "kind": "function",
    "parameters": Object {
      "options": Object {
        "additionalProperties": false,
        "properties": Object {
          "noWaitAfter": Object {
            "description": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to \`false\`.",
            "type": "boolean",
          },
          "timeout": Object {
            "description": "Maximum time in milliseconds, defaults to 30 seconds, pass \`0\` to disable timeout. The default value can be changed by using the browserContext.setDefaultTimeout(timeout) or page.setDefaultTimeout(timeout) methods.",
            "type": "number",
          },
        },
        "type": "object",
      },
      "selector": Object {
        "description": "A selector to query page for. See working with selectors for more details.",
        "type": "string",
      },
      "value": Object {
        "description": "Value to fill for the \`<input>\`, \`<textarea>\` or \`[contenteditable]\` element.",
        "type": "string",
      },
    },
    "required": Array [
      "selector",
      "value",
    ],
    "type": "Promise",
  },
  "focus": Object {
    "kind": "function",
    "parameters": Object {
      "options": Object {
        "additionalProperties": false,
        "properties": Object {
          "timeout": Object {
            "description": "Maximum time in milliseconds, defaults to 30 seconds, pass \`0\` to disable timeout. The default value can be changed by using the browserContext.setDefaultTimeout(timeout) or page.setDefaultTimeout(timeout) methods.",
            "type": "number",
          },
        },
        "type": "object",
      },
      "selector": Object {
        "description": "A selector of an element to focus. If there are multiple elements satisfying the selector, the first will be focused. See working with selectors for more details.",
        "type": "string",
      },
    },
    "required": Array [
      "selector",
    ],
    "type": "Promise",
  },
  "hover": Object {
    "kind": "function",
    "parameters": Object {
      "options": Object {
        "additionalProperties": false,
        "properties": Object {
          "force": Object {
            "description": "Whether to bypass the actionability checks. Defaults to \`false\`.",
            "type": "boolean",
          },
          "modifiers": Object {
            "description": "Modifier keys to press. Ensures that only these modifiers are pressed during the hover, and then restores current modifiers back. If not specified, currently pressed modifiers are used.",
            "items": Object {
              "enum": Array [
                "Alt",
                "Control",
                "Meta",
                "Shift",
              ],
              "type": "string",
            },
            "type": "array",
          },
          "position": Object {
            "additionalProperties": false,
            "description": "A point to hover relative to the top-left corner of element padding box. If not specified, hovers over some visible point of the element.",
            "properties": Object {
              "x": Object {
                "type": "number",
              },
              "y": Object {
                "type": "number",
              },
            },
            "required": Array [
              "x",
              "y",
            ],
            "type": "object",
          },
          "timeout": Object {
            "description": "Maximum time in milliseconds, defaults to 30 seconds, pass \`0\` to disable timeout. The default value can be changed by using the browserContext.setDefaultTimeout(timeout) or page.setDefaultTimeout(timeout) methods.",
            "type": "number",
          },
        },
        "type": "object",
      },
      "selector": Object {
        "description": "A selector to search for element to hover. If there are multiple elements satisfying the selector, the first will be hovered. See working with selectors for more details.",
        "type": "string",
      },
    },
    "required": Array [
      "selector",
    ],
    "type": "Promise",
  },
  "mouse": Object {
    "additionalProperties": false,
    "properties": Object {
      "click": Object {
        "description": "Shortcut for \`mouse.move\`, \`mouse.down\` and \`mouse.up\`.",
        "kind": "function",
        "parameters": Object {
          "options": Object {
            "additionalProperties": false,
            "properties": Object {
              "button": Object {
                "description": "Defaults to \`left\`.",
                "enum": Array [
                  "left",
                  "middle",
                  "right",
                ],
                "type": "string",
              },
              "clickCount": Object {
                "description": "defaults to 1. See UIEvent.detail.",
                "type": "number",
              },
              "delay": Object {
                "description": "Time to wait between \`mousedown\` and \`mouseup\` in milliseconds. Defaults to 0.",
                "type": "number",
              },
            },
            "type": "object",
          },
          "x": Object {
            "type": "number",
          },
          "y": Object {
            "type": "number",
          },
        },
        "required": Array [
          "x",
          "y",
        ],
        "type": "Promise",
      },
      "dblclick": Object {
        "description": "Shortcut for \`mouse.move\`, \`mouse.down\`, \`mouse.up\`, \`mouse.down\` and \`mouse.up\`.",
        "kind": "function",
        "parameters": Object {
          "options": Object {
            "additionalProperties": false,
            "properties": Object {
              "button": Object {
                "description": "Defaults to \`left\`.",
                "enum": Array [
                  "left",
                  "middle",
                  "right",
                ],
                "type": "string",
              },
              "delay": Object {
                "description": "Time to wait between \`mousedown\` and \`mouseup\` in milliseconds. Defaults to 0.",
                "type": "number",
              },
            },
            "type": "object",
          },
          "x": Object {
            "type": "number",
          },
          "y": Object {
            "type": "number",
          },
        },
        "required": Array [
          "x",
          "y",
        ],
        "type": "Promise",
      },
      "down": Object {
        "description": "Dispatches a \`mousedown\` event.",
        "kind": "function",
        "parameters": Object {
          "options": Object {
            "additionalProperties": false,
            "properties": Object {
              "button": Object {
                "description": "Defaults to \`left\`.",
                "enum": Array [
                  "left",
                  "middle",
                  "right",
                ],
                "type": "string",
              },
              "clickCount": Object {
                "description": "defaults to 1. See UIEvent.detail.",
                "type": "number",
              },
            },
            "type": "object",
          },
        },
        "required": Array [],
        "type": "Promise",
      },
      "move": Object {
        "description": "Dispatches a \`mousemove\` event.",
        "kind": "function",
        "parameters": Object {
          "options": Object {
            "additionalProperties": false,
            "properties": Object {
              "steps": Object {
                "description": "defaults to 1. Sends intermediate \`mousemove\` events.",
                "type": "number",
              },
            },
            "type": "object",
          },
          "x": Object {
            "type": "number",
          },
          "y": Object {
            "type": "number",
          },
        },
        "required": Array [
          "x",
          "y",
        ],
        "type": "Promise",
      },
      "up": Object {
        "description": "Dispatches a \`mouseup\` event.",
        "kind": "function",
        "parameters": Object {
          "options": Object {
            "additionalProperties": false,
            "properties": Object {
              "button": Object {
                "description": "Defaults to \`left\`.",
                "enum": Array [
                  "left",
                  "middle",
                  "right",
                ],
                "type": "string",
              },
              "clickCount": Object {
                "description": "defaults to 1. See UIEvent.detail.",
                "type": "number",
              },
            },
            "type": "object",
          },
        },
        "required": Array [],
        "type": "Promise",
      },
    },
    "required": Array [
      "click",
      "dblclick",
      "down",
      "move",
      "up",
    ],
    "type": "object",
  },
  "mouseDownOnSelector": Object {
    "kind": "function",
    "parameters": Object {
      "point": Object {
        "additionalProperties": false,
        "properties": Object {
          "x": Object {
            "type": "number",
          },
          "y": Object {
            "type": "number",
          },
        },
        "type": "object",
      },
      "selector": Object {
        "type": "string",
      },
    },
    "required": Array [
      "selector",
    ],
    "type": "Promise",
  },
  "mouseMoveToSelector": Object {
    "kind": "function",
    "parameters": Object {
      "point": Object {
        "additionalProperties": false,
        "properties": Object {
          "x": Object {
            "type": "number",
          },
          "y": Object {
            "type": "number",
          },
        },
        "type": "object",
      },
      "selector": Object {
        "type": "string",
      },
    },
    "required": Array [
      "selector",
    ],
    "type": "Promise",
  },
  "press": Object {
    "kind": "function",
    "parameters": Object {
      "key": Object {
        "description": "Name of the key to press or a character to generate, such as \`ArrowLeft\` or \`a\`.",
        "type": "string",
      },
      "options": Object {
        "additionalProperties": false,
        "properties": Object {
          "delay": Object {
            "description": "Time to wait between \`keydown\` and \`keyup\` in milliseconds. Defaults to 0.",
            "type": "number",
          },
          "noWaitAfter": Object {
            "description": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to \`false\`.",
            "type": "boolean",
          },
          "timeout": Object {
            "description": "Maximum time in milliseconds, defaults to 30 seconds, pass \`0\` to disable timeout. The default value can be changed by using the browserContext.setDefaultTimeout(timeout) or page.setDefaultTimeout(timeout) methods.",
            "type": "number",
          },
        },
        "type": "object",
      },
      "selector": Object {
        "description": "A selector of an element to type into. If there are multiple elements satisfying the selector, the first will be used. See working with selectors for more details.",
        "type": "string",
      },
    },
    "required": Array [
      "selector",
      "key",
    ],
    "type": "Promise",
  },
  "scrollSelector": Object {
    "kind": "function",
    "parameters": Object {
      "scrollProperty": Object {
        "additionalProperties": false,
        "properties": Object {
          "left": Object {
            "type": "number",
          },
          "top": Object {
            "type": "number",
          },
        },
        "type": "object",
      },
      "selector": Object {
        "type": "string",
      },
    },
    "required": Array [
      "selector",
      "scrollProperty",
    ],
    "type": "Promise",
  },
  "selectorMouseWheel": Object {
    "kind": "function",
    "parameters": Object {
      "eventInitDict": Object {
        "additionalProperties": false,
        "properties": Object {
          "deltaMode": Object {
            "type": "number",
          },
          "deltaX": Object {
            "type": "number",
          },
          "deltaY": Object {
            "type": "number",
          },
          "deltaZ": Object {
            "type": "number",
          },
        },
        "type": "object",
      },
      "selector": Object {
        "type": "string",
      },
    },
    "required": Array [
      "selector",
    ],
    "type": "Promise",
  },
  "setSelectorSize": Object {
    "kind": "function",
    "parameters": Object {
      "height": Object {
        "type": "string",
      },
      "selector": Object {
        "type": "string",
      },
      "width": Object {
        "type": "string",
      },
    },
    "required": Array [
      "selector",
    ],
    "type": "Promise",
  },
  "takeScreenshot": Object {
    "kind": "function",
    "parameters": Object {
      "stitchOptions": Object {
        "additionalProperties": false,
        "properties": Object {
          "blend": Object {
            "default": "multiply",
            "description": "How to blend this image with the image below. (optional)",
            "enum": Array [
              "clear",
              "source",
              "over",
              "in",
              "out",
              "atop",
              "dest",
              "dest-over",
              "dest-in",
              "dest-out",
              "dest-atop",
              "xor",
              "add",
              "saturate",
              "multiply",
              "screen",
              "overlay",
              "darken",
              "lighten",
              "colour-dodge",
              "colour-burn",
              "hard-light",
              "soft-light",
              "difference",
              "exclusion",
            ],
            "type": "string",
          },
        },
        "type": "object",
      },
    },
    "required": Array [],
    "type": "Promise",
  },
  "takeScreenshotOptions": Object {
    "kind": "function",
    "parameters": Object {
      "mergeType": Object {
        "enum": Array [
          "stitch",
          "overlay",
        ],
        "type": "string",
      },
      "overlayOptions": Object {
        "additionalProperties": false,
        "properties": Object {
          "blend": Object {
            "default": "multiply",
            "description": "How to blend this image with the image below. (optional)",
            "enum": Array [
              "clear",
              "source",
              "over",
              "in",
              "out",
              "atop",
              "dest",
              "dest-over",
              "dest-in",
              "dest-out",
              "dest-atop",
              "xor",
              "add",
              "saturate",
              "multiply",
              "screen",
              "overlay",
              "darken",
              "lighten",
              "colour-dodge",
              "colour-burn",
              "hard-light",
              "soft-light",
              "difference",
              "exclusion",
            ],
            "type": "string",
          },
        },
        "type": "object",
      },
      "stitchOptions": Object {
        "additionalProperties": false,
        "properties": Object {
          "align": Object {
            "description": "Aligning of given images. If the images are not all the same size, images will be sorted to largest image. Possible values are \`start\`, \`center\` and \`end\`. Default is \`start\`.",
            "enum": Array [
              "start",
              "center",
              "end",
            ],
            "type": "string",
          },
          "color": Object {
            "description": "Set the background color of image.",
            "type": "string",
          },
          "direction": Object {
            "description": "Direction of the merged image.",
            "enum": Array [
              "vertical",
              "horizontal",
            ],
            "type": "string",
          },
          "margin": Object {
            "default": "0 0 0 0",
            "description": "Set the margin of image, considered as standard css shorthand properties (e.g. '40 40 0 10')",
            "type": "string",
          },
          "offset": Object {
            "description": "Offset in pixels between each image. Default is \`0\`",
            "type": "number",
          },
        },
        "type": "object",
      },
    },
    "required": Array [],
    "type": "Promise",
  },
  "type": Object {
    "kind": "function",
    "parameters": Object {
      "options": Object {
        "additionalProperties": false,
        "properties": Object {
          "delay": Object {
            "description": "Time to wait between key presses in milliseconds. Defaults to 0.",
            "type": "number",
          },
          "noWaitAfter": Object {
            "description": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to \`false\`.",
            "type": "boolean",
          },
          "timeout": Object {
            "description": "Maximum time in milliseconds, defaults to 30 seconds, pass \`0\` to disable timeout. The default value can be changed by using the browserContext.setDefaultTimeout(timeout) or page.setDefaultTimeout(timeout) methods.",
            "type": "number",
          },
        },
        "type": "object",
      },
      "selector": Object {
        "description": "A selector of an element to type into. If there are multiple elements satisfying the selector, the first will be used. See working with selectors for more details.",
        "type": "string",
      },
      "text": Object {
        "description": "A text to type into a focused element.",
        "type": "string",
      },
    },
    "required": Array [
      "selector",
      "text",
    ],
    "type": "Promise",
  },
  "uncheck": Object {
    "kind": "function",
    "parameters": Object {
      "options": Object {
        "additionalProperties": false,
        "properties": Object {
          "force": Object {
            "description": "Whether to bypass the actionability checks. Defaults to \`false\`.",
            "type": "boolean",
          },
          "noWaitAfter": Object {
            "description": "Actions that initiate navigations are waiting for these navigations to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to \`false\`.",
            "type": "boolean",
          },
          "timeout": Object {
            "description": "Maximum time in milliseconds, defaults to 30 seconds, pass \`0\` to disable timeout. The default value can be changed by using the browserContext.setDefaultTimeout(timeout) or page.setDefaultTimeout(timeout) methods.",
            "type": "number",
          },
        },
        "type": "object",
      },
      "selector": Object {
        "description": "A selector to search for uncheckbox to check. If there are multiple elements satisfying the selector, the first will be checked. See working with selectors for more details.",
        "type": "string",
      },
    },
    "required": Array [
      "selector",
    ],
    "type": "Promise",
  },
  "waitForSelector": Object {
    "kind": "function",
    "parameters": Object {
      "options": Object {
        "additionalProperties": false,
        "properties": Object {
          "state": Object {
            "description": "Defaults to \`'visible'\`. Can be either:
  - \`'attached'\` - wait for element to be present in DOM.
  - \`'detached'\` - wait for element to not be present in DOM.
  - \`'visible'\` - wait for element to have non-empty bounding box and no \`visibility:hidden\`. Note that element without any content or with \`display:none\` has an empty bounding box and is not considered visible.
  - \`'hidden'\` - wait for element to be either detached from DOM, or have an empty bounding box or \`visibility:hidden\`. This is opposite to the \`'visible'\` option.",
            "enum": Array [
              "attached",
              "detached",
              "hidden",
              "visible",
            ],
            "type": "string",
          },
          "timeout": Object {
            "description": "Maximum time in milliseconds, defaults to 30 seconds, pass \`0\` to disable timeout. The default value can be changed by using the browserContext.setDefaultTimeout(timeout) or page.setDefaultTimeout(timeout) methods.",
            "type": "number",
          },
        },
        "type": "object",
      },
      "selector": Object {
        "type": "string",
      },
    },
    "required": Array [
      "selector",
      "options",
    ],
    "type": "Promise",
  },
  "waitForTimeout": Object {
    "kind": "function",
    "parameters": Object {
      "timeout": Object {
        "description": "A timeout to wait for",
        "type": "number",
      },
    },
    "required": Array [
      "timeout",
    ],
    "type": "Promise",
  },
}
`;
