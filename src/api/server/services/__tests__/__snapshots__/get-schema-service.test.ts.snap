// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`getSchemaService should generate PlaywrightBrowserContextOptionSchema schema 1`] = `
Object {
  "_recordVideos": Object {
    "additionalProperties": false,
    "description": "**experimental** Enables automatic video recording for new pages. The video will have frames with the provided dimensions. Actual picture of the page will be scaled down if necessary to fit specified size.",
    "properties": Object {
      "height": Object {
        "description": "Video frame height.",
        "type": "number",
      },
      "width": Object {
        "description": "Video frame width.",
        "type": "number",
      },
    },
    "required": Array [
      "width",
      "height",
    ],
    "type": "object",
  },
  "acceptDownloads": Object {
    "description": "Whether to automatically download all the attachments. Defaults to \`false\` where all the downloads are canceled.",
    "type": "boolean",
  },
  "bypassCSP": Object {
    "description": "Toggles bypassing page's Content-Security-Policy.",
    "type": "boolean",
  },
  "colorScheme": Object {
    "description": "Emulates \`'prefers-colors-scheme'\` media feature, supported values are \`'light'\`, \`'dark'\`, \`'no-preference'\`. See page.emulateMedia(options) for more details. Defaults to '\`light\`'.",
    "enum": Array [
      "dark",
      "light",
      "no-preference",
    ],
    "type": "string",
  },
  "cursor": Object {
    "type": "boolean",
  },
  "deviceScaleFactor": Object {
    "description": "Specify device scale factor (can be thought of as dpr). Defaults to \`1\`.",
    "type": "number",
  },
  "extraHTTPHeaders": Object {
    "additionalProperties": Object {
      "type": "string",
    },
    "description": "An object containing additional HTTP headers to be sent with every request. All header values must be strings.",
    "type": "object",
  },
  "geolocation": Object {
    "additionalProperties": false,
    "properties": Object {
      "accuracy": Object {
        "description": "Non-negative accuracy value. Defaults to \`0\`.",
        "type": "number",
      },
      "latitude": Object {
        "description": "Latitude between -90 and 90.",
        "type": "number",
      },
      "longitude": Object {
        "description": "Longitude between -180 and 180.",
        "type": "number",
      },
    },
    "required": Array [
      "latitude",
      "longitude",
    ],
    "type": "object",
  },
  "hasTouch": Object {
    "description": "Specifies if viewport supports touch events. Defaults to false.",
    "type": "boolean",
  },
  "httpCredentials": Object {
    "additionalProperties": false,
    "description": "Credentials for HTTP authentication.",
    "properties": Object {
      "password": Object {
        "type": "string",
      },
      "username": Object {
        "type": "string",
      },
    },
    "required": Array [
      "username",
      "password",
    ],
    "type": "object",
  },
  "ignoreHTTPSErrors": Object {
    "description": "Whether to ignore HTTPS errors during navigation. Defaults to \`false\`.",
    "type": "boolean",
  },
  "isMobile": Object {
    "description": "Whether the \`meta viewport\` tag is taken into account and touch events are enabled. Defaults to \`false\`. Not supported in Firefox.",
    "type": "boolean",
  },
  "javaScriptEnabled": Object {
    "description": "Whether or not to enable JavaScript in the context. Defaults to true.",
    "type": "boolean",
  },
  "locale": Object {
    "description": "Specify user locale, for example \`en-GB\`, \`de-DE\`, etc. Locale will affect \`navigator.language\` value, \`Accept-Language\` request header value as well as number and date formatting rules.",
    "type": "string",
  },
  "logger": Object {
    "additionalProperties": false,
    "description": "Logger sink for Playwright logging.",
    "properties": Object {
      "isEnabled": Object {
        "description": "Determines whether sink is interested in the logger with the given name and severity.",
        "kind": "function",
        "parameters": Object {
          "name": Object {
            "description": "logger name",
            "type": "string",
          },
          "severity": Object {
            "enum": Array [
              "error",
              "info",
              "verbose",
              "warning",
            ],
            "type": "string",
          },
        },
        "required": Array [
          "name",
          "severity",
        ],
        "type": "boolean",
      },
      "log": Object {
        "kind": "function",
        "parameters": Object {
          "args": Object {
            "description": "message arguments",
            "items": Object {
              "additionalProperties": false,
              "properties": Object {
                "constructor": Object {
                  "additionalProperties": false,
                  "type": "object",
                },
                "hasOwnProperty": Object {
                  "kind": "function",
                  "parameters": Object {
                    "v": Object {
                      "anyOf": Array [
                        Object {
                          "type": "string",
                        },
                        Object {
                          "type": "number",
                        },
                        Object {
                          "type": "unknown",
                        },
                      ],
                    },
                  },
                  "required": Array [
                    "v",
                  ],
                  "type": "boolean",
                },
                "isPrototypeOf": Object {
                  "kind": "function",
                  "parameters": Object {
                    "v": Object {
                      "$ref": "#/definitions/interface-731470504-3934-4937-731470504-0-208502",
                    },
                  },
                  "required": Array [
                    "v",
                  ],
                  "type": "boolean",
                },
                "propertyIsEnumerable": Object {
                  "kind": "function",
                  "parameters": Object {
                    "v": Object {
                      "anyOf": Array [
                        Object {
                          "type": "string",
                        },
                        Object {
                          "type": "number",
                        },
                        Object {
                          "type": "unknown",
                        },
                      ],
                    },
                  },
                  "required": Array [
                    "v",
                  ],
                  "type": "boolean",
                },
                "toLocaleString": Object {
                  "kind": "function",
                  "type": "string",
                },
                "toString": Object {
                  "kind": "function",
                  "type": "string",
                },
                "valueOf": Object {
                  "kind": "function",
                  "properties": Object {
                    "$ref": "#/definitions/interface-731470504-3934-4937-731470504-0-208502",
                  },
                },
              },
              "required": Array [
                "constructor",
                "toString",
                "toLocaleString",
                "valueOf",
                "hasOwnProperty",
                "isPrototypeOf",
                "propertyIsEnumerable",
              ],
              "type": "object",
            },
            "type": "array",
          },
          "hints": Object {
            "additionalProperties": false,
            "description": "optional formatting hints",
            "properties": Object {
              "color": Object {
                "description": "preferred logger color",
                "type": "string",
              },
            },
            "type": "object",
          },
          "message": Object {
            "anyOf": Array [
              Object {
                "type": "string",
              },
              Object {
                "additionalProperties": false,
                "properties": Object {
                  "message": Object {
                    "type": "string",
                  },
                  "name": Object {
                    "type": "string",
                  },
                  "stack": Object {
                    "type": "string",
                  },
                },
                "required": Array [
                  "name",
                  "message",
                ],
                "type": "object",
              },
            ],
            "description": "log message format",
          },
          "name": Object {
            "description": "logger name",
            "type": "string",
          },
          "severity": Object {
            "enum": Array [
              "error",
              "info",
              "verbose",
              "warning",
            ],
            "type": "string",
          },
        },
        "required": Array [
          "name",
          "severity",
          "message",
          "args",
          "hints",
        ],
        "type": "null",
      },
    },
    "required": Array [
      "isEnabled",
      "log",
    ],
    "type": "object",
  },
  "offline": Object {
    "description": "Whether to emulate network being offline. Defaults to \`false\`.",
    "type": "boolean",
  },
  "permissions": Object {
    "description": "A list of permissions to grant to all pages in this context. See browserContext.grantPermissions for more details.",
    "items": Object {
      "type": "string",
    },
    "type": "array",
  },
  "timezoneId": Object {
    "description": "Changes the timezone of the context. See ICUâ€™s \`metaZones.txt\` for a list of supported timezone IDs.",
    "type": "string",
  },
  "userAgent": Object {
    "description": "Specific user agent to use in this context.",
    "type": "string",
  },
  "viewport": Object {
    "additionalProperties": false,
    "description": "Sets a consistent viewport for each page. Defaults to an 1280x720 viewport. \`null\` disables the default viewport.",
    "properties": Object {
      "height": Object {
        "description": "page height in pixels.",
        "type": "number",
      },
      "width": Object {
        "description": "page width in pixels.",
        "type": "number",
      },
    },
    "required": Array [
      "width",
      "height",
    ],
    "type": "object",
  },
}
`;

exports[`getSchemaService should generate PlaywrightScreenshotOptionSchema schema 1`] = `
Object {
  "clip": Object {
    "additionalProperties": false,
    "description": "An object which specifies clipping of the resulting image. Should have the following fields:",
    "properties": Object {
      "height": Object {
        "description": "height of clipping area",
        "type": "number",
      },
      "width": Object {
        "description": "width of clipping area",
        "type": "number",
      },
      "x": Object {
        "description": "x-coordinate of top-left corner of clip area",
        "type": "number",
      },
      "y": Object {
        "description": "y-coordinate of top-left corner of clip area",
        "type": "number",
      },
    },
    "required": Array [
      "x",
      "y",
      "width",
      "height",
    ],
    "type": "object",
  },
  "fullPage": Object {
    "description": "When true, takes a screenshot of the full scrollable page, instead of the currently visibvle viewport. Defaults to \`false\`.",
    "type": "boolean",
  },
  "omitBackground": Object {
    "description": "Hides default white background and allows capturing screenshots with transparency. Not applicable to \`jpeg\` images. Defaults to \`false\`.",
    "type": "boolean",
  },
  "path": Object {
    "description": "The file path to save the image to. The screenshot type will be inferred from file extension. If \`path\` is a relative path, then it is resolved relative to current working directory. If no path is provided, the image won't be saved to the disk.",
    "type": "string",
  },
  "quality": Object {
    "description": "The quality of the image, between 0-100. Not applicable to \`png\` images.",
    "type": "number",
  },
  "timeout": Object {
    "description": "Maximum time in milliseconds, defaults to 30 seconds, pass \`0\` to disable timeout. The default value can be changed by using the browserContext.setDefaultTimeout(timeout) or page.setDefaultTimeout(timeout) methods.",
    "type": "number",
  },
  "type": Object {
    "description": "Specify screenshot type, defaults to \`png\`.",
    "enum": Array [
      "png",
      "jpeg",
    ],
    "type": "string",
  },
}
`;
