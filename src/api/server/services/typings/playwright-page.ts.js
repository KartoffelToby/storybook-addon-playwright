"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ts_to_json_1 = require("ts-to-json");
const path_1 = require("path");
const configs_1 = require("../configs");
const path = path_1.join(__dirname, '/typings/playwright-page.d.ts');
const selectedPageKeys = [
    'click',
    'dblclick',
    'fill',
    'focus',
    'hover',
    'hover',
    'press',
    'waitForSelector',
    'waitForTimeout',
];
const selectedMouseKeys = [
    'click',
    'dblclick',
    'down',
    'move',
    'up',
];
const selectedKeys = [
    ...selectedPageKeys,
    ...selectedMouseKeys.map((x) => 'mouse.' + x),
];
let _schema;
exports.generateSchema = () => {
    const type = 'PlaywrightPage';
    const config = {
        encodeRefs: false,
        expose: 'none',
        handleUnknownTypes: true,
        includeProps: selectedKeys,
        jsDoc: 'extended',
        path: path,
        skipParseFiles: ['lib.dom.d.ts'],
        skipParseTypes: ['HTMLElementTagNameMap[K]', 'Promise', 'JSHandle'],
        skipTypeCheck: true,
        topRef: true,
        type,
    };
    const program = ts_to_json_1.createProgram(config);
    const generator = new ts_to_json_1.SchemaGenerator(program, ts_to_json_1.createParser(program, config), ts_to_json_1.createFormatter(config));
    const result = generator.createSchema(type);
    return result.definitions[type]
        .properties;
};
exports.getActionsSchema = () => {
    if (!_schema)
        _schema = exports.generateSchema();
    const customSchema = configs_1.getConfigs().customActionSchema;
    if (customSchema) {
        _schema = Object.assign(Object.assign({}, _schema), customSchema);
    }
    return _schema;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiWjpcXGdpdGh1Ylxcc3Rvcnlib29rLWFkZG9ucy1wbGF5d3JpZ2h0XFxzcmNcXGFwaVxcc2VydmVyXFxzZXJ2aWNlc1xcZ2V0LWFjdGlvbnMtc2NoZW1hLnRzIiwic291cmNlcyI6WyJaOlxcZ2l0aHViXFxzdG9yeWJvb2stYWRkb25zLXBsYXl3cmlnaHRcXHNyY1xcYXBpXFxzZXJ2ZXJcXHNlcnZpY2VzXFxnZXQtYWN0aW9ucy1zY2hlbWEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwyQ0FPb0I7QUFFcEIsK0JBQTRCO0FBRTVCLHdDQUF3QztBQUV4QyxNQUFNLElBQUksR0FBRyxXQUFJLENBQUMsU0FBUyxFQUFFLCtCQUErQixDQUFDLENBQUM7QUFNOUQsTUFBTSxnQkFBZ0IsR0FBZTtJQUNuQyxPQUFPO0lBQ1AsVUFBVTtJQUNWLE1BQU07SUFDTixPQUFPO0lBQ1AsT0FBTztJQUNQLE9BQU87SUFDUCxPQUFPO0lBQ1AsaUJBQWlCO0lBQ2pCLGdCQUFnQjtDQUNqQixDQUFDO0FBRUYsTUFBTSxpQkFBaUIsR0FBZ0I7SUFDckMsT0FBTztJQUNQLFVBQVU7SUFDVixNQUFNO0lBQ04sTUFBTTtJQUNOLElBQUk7Q0FDTCxDQUFDO0FBRUYsTUFBTSxZQUFZLEdBQUc7SUFDbkIsR0FBRyxnQkFBZ0I7SUFDbkIsR0FBRyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUM7Q0FDbEMsQ0FBQztBQUVkLElBQUksT0FBeUIsQ0FBQztBQUVqQixRQUFBLGNBQWMsR0FBRyxHQUFHLEVBQUU7SUFDakMsTUFBTSxJQUFJLEdBQUcsZ0JBQWdCLENBQUM7SUFDOUIsTUFBTSxNQUFNLEdBQVc7UUFDckIsVUFBVSxFQUFFLEtBQUs7UUFDakIsTUFBTSxFQUFFLE1BQU07UUFDZCxrQkFBa0IsRUFBRSxJQUFJO1FBQ3hCLFlBQVksRUFBRSxZQUFZO1FBQzFCLEtBQUssRUFBRSxVQUFVO1FBQ2pCLElBQUksRUFBRSxJQUFJO1FBQ1YsY0FBYyxFQUFFLENBQUMsY0FBYyxDQUFDO1FBQ2hDLGNBQWMsRUFBRSxDQUFDLDBCQUEwQixFQUFFLFNBQVMsRUFBRSxVQUFVLENBQUM7UUFDbkUsYUFBYSxFQUFFLElBQUk7UUFDbkIsTUFBTSxFQUFFLElBQUk7UUFDWixJQUFJO0tBQ0wsQ0FBQztJQUVGLE1BQU0sT0FBTyxHQUFHLDBCQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFdEMsTUFBTSxTQUFTLEdBQW9CLElBQUksNEJBQWUsQ0FDcEQsT0FBTyxFQUNQLHlCQUFZLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxFQUM3Qiw0QkFBZSxDQUFDLE1BQU0sQ0FBQyxDQUN4QixDQUFDO0lBRUYsTUFBTSxNQUFNLEdBQUcsU0FBUyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUU1QyxPQUFRLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFnQjtTQUM1QyxVQUE4QixDQUFDO0FBQ3BDLENBQUMsQ0FBQztBQUVXLFFBQUEsZ0JBQWdCLEdBQUcsR0FBRyxFQUFFO0lBQ25DLElBQUksQ0FBQyxPQUFPO1FBQUUsT0FBTyxHQUFHLHNCQUFjLEVBQUUsQ0FBQztJQUN6QyxNQUFNLFlBQVksR0FBRyxvQkFBVSxFQUFFLENBQUMsa0JBQWtCLENBQUM7SUFDckQsSUFBSSxZQUFZLEVBQUU7UUFDaEIsT0FBTyxtQ0FBUSxPQUFPLEdBQUssWUFBWSxDQUFFLENBQUM7S0FDM0M7SUFDRCxPQUFPLE9BQU8sQ0FBQztBQUNqQixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBjcmVhdGVQcm9ncmFtLFxuICBTY2hlbWFHZW5lcmF0b3IsXG4gIGNyZWF0ZVBhcnNlcixcbiAgY3JlYXRlRm9ybWF0dGVyLFxuICBDb25maWcsXG4gIERlZmluaXRpb24sXG59IGZyb20gJ3RzLXRvLWpzb24nO1xuaW1wb3J0IHsgUGFnZSwgTW91c2UgfSBmcm9tICdwbGF5d3JpZ2h0LWNvcmUnO1xuaW1wb3J0IHsgam9pbiB9IGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgQWN0aW9uU2NoZW1hTGlzdCB9IGZyb20gJy4uLy4uLy4uL3R5cGluZ3MnO1xuaW1wb3J0IHsgZ2V0Q29uZmlncyB9IGZyb20gJy4uL2NvbmZpZ3MnO1xuXG5jb25zdCBwYXRoID0gam9pbihfX2Rpcm5hbWUsICcvdHlwaW5ncy9wbGF5d3JpZ2h0LXBhZ2UuZC50cycpO1xuXG50eXBlIE1vdXNlS2V5cyA9IGtleW9mIE1vdXNlO1xuXG50eXBlIFBhZ2VLZXlzID0ga2V5b2YgUGFnZTtcblxuY29uc3Qgc2VsZWN0ZWRQYWdlS2V5czogUGFnZUtleXNbXSA9IFtcbiAgJ2NsaWNrJyxcbiAgJ2RibGNsaWNrJyxcbiAgJ2ZpbGwnLFxuICAnZm9jdXMnLFxuICAnaG92ZXInLFxuICAnaG92ZXInLFxuICAncHJlc3MnLFxuICAnd2FpdEZvclNlbGVjdG9yJyxcbiAgJ3dhaXRGb3JUaW1lb3V0Jyxcbl07XG5cbmNvbnN0IHNlbGVjdGVkTW91c2VLZXlzOiBNb3VzZUtleXNbXSA9IFtcbiAgJ2NsaWNrJyxcbiAgJ2RibGNsaWNrJyxcbiAgJ2Rvd24nLFxuICAnbW92ZScsXG4gICd1cCcsXG5dO1xuXG5jb25zdCBzZWxlY3RlZEtleXMgPSBbXG4gIC4uLnNlbGVjdGVkUGFnZUtleXMsXG4gIC4uLnNlbGVjdGVkTW91c2VLZXlzLm1hcCgoeCkgPT4gJ21vdXNlLicgKyB4KSxcbl0gYXMgc3RyaW5nW107XG5cbmxldCBfc2NoZW1hOiBBY3Rpb25TY2hlbWFMaXN0O1xuXG5leHBvcnQgY29uc3QgZ2VuZXJhdGVTY2hlbWEgPSAoKSA9PiB7XG4gIGNvbnN0IHR5cGUgPSAnUGxheXdyaWdodFBhZ2UnO1xuICBjb25zdCBjb25maWc6IENvbmZpZyA9IHtcbiAgICBlbmNvZGVSZWZzOiBmYWxzZSxcbiAgICBleHBvc2U6ICdub25lJyxcbiAgICBoYW5kbGVVbmtub3duVHlwZXM6IHRydWUsXG4gICAgaW5jbHVkZVByb3BzOiBzZWxlY3RlZEtleXMsXG4gICAganNEb2M6ICdleHRlbmRlZCcsXG4gICAgcGF0aDogcGF0aCxcbiAgICBza2lwUGFyc2VGaWxlczogWydsaWIuZG9tLmQudHMnXSxcbiAgICBza2lwUGFyc2VUeXBlczogWydIVE1MRWxlbWVudFRhZ05hbWVNYXBbS10nLCAnUHJvbWlzZScsICdKU0hhbmRsZSddLFxuICAgIHNraXBUeXBlQ2hlY2s6IHRydWUsXG4gICAgdG9wUmVmOiB0cnVlLFxuICAgIHR5cGUsXG4gIH07XG5cbiAgY29uc3QgcHJvZ3JhbSA9IGNyZWF0ZVByb2dyYW0oY29uZmlnKTtcblxuICBjb25zdCBnZW5lcmF0b3I6IFNjaGVtYUdlbmVyYXRvciA9IG5ldyBTY2hlbWFHZW5lcmF0b3IoXG4gICAgcHJvZ3JhbSxcbiAgICBjcmVhdGVQYXJzZXIocHJvZ3JhbSwgY29uZmlnKSxcbiAgICBjcmVhdGVGb3JtYXR0ZXIoY29uZmlnKSxcbiAgKTtcblxuICBjb25zdCByZXN1bHQgPSBnZW5lcmF0b3IuY3JlYXRlU2NoZW1hKHR5cGUpO1xuXG4gIHJldHVybiAocmVzdWx0LmRlZmluaXRpb25zW3R5cGVdIGFzIERlZmluaXRpb24pXG4gICAgLnByb3BlcnRpZXMgYXMgQWN0aW9uU2NoZW1hTGlzdDtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRBY3Rpb25zU2NoZW1hID0gKCkgPT4ge1xuICBpZiAoIV9zY2hlbWEpIF9zY2hlbWEgPSBnZW5lcmF0ZVNjaGVtYSgpO1xuICBjb25zdCBjdXN0b21TY2hlbWEgPSBnZXRDb25maWdzKCkuY3VzdG9tQWN0aW9uU2NoZW1hO1xuICBpZiAoY3VzdG9tU2NoZW1hKSB7XG4gICAgX3NjaGVtYSA9IHsgLi4uX3NjaGVtYSwgLi4uY3VzdG9tU2NoZW1hIH07XG4gIH1cbiAgcmV0dXJuIF9zY2hlbWE7XG59O1xuIl19